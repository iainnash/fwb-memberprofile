{
  "address": "0x58685D02E90825bCa87929Bb207A0560A8815c79",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x004657fd75e6c266731fd6ad12a7e80187d3a0a3997a212fd0761b6083d5fa4a",
  "receipt": {
    "to": null,
    "from": "0x91c2b511D5858617c83aBC69483097e870c85208",
    "contractAddress": "0x58685D02E90825bCa87929Bb207A0560A8815c79",
    "transactionIndex": 40,
    "gasUsed": "1520157",
    "logsBloom": "0x
    "blockHash": "0x3e8cf4bf59a3731e9a45df0230a8df8fc3828eb92376ed633f156dbcea19328f",
    "transactionHash": "0x004657fd75e6c266731fd6ad12a7e80187d3a0a3997a212fd0761b6083d5fa4a",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 9290685,
        "transactionHash": "0x004657fd75e6c266731fd6ad12a7e80187d3a0a3997a212fd0761b6083d5fa4a",
        "address": "0x58685D02E90825bCa87929Bb207A0560A8815c79",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000091c2b511d5858617c83abc69483097e870c85208"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x3e8cf4bf59a3731e9a45df0230a8df8fc3828eb92376ed633f156dbcea19328f"
      }
    ],
    "blockNumber": 9290685,
    "cumulativeGasUsed": "7130721",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d1a4b93a0d9def37fcb4aeff0bbf967a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\":   @computerdata / @bretth18\",\"details\":\":   Token URI's and baseURI can be set via permissioned owner. Ownership is transferrable. This version uses openzeppelin ERC721URIStorage, Ownable and Counters for ease and security purposes.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\":   FWBMemberProfile\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseURI()\":{\"notice\":\"String variable to hold our baseURI\"},\"constructor\":{\"notice\":\"Constructor\"}},\"notice\":\"------------------------------------------------------------------------------------------------ WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNx>+|}dWWWWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWy`      _dWWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQUr^*JPf, `XWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW&'  ~QWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWQ?'-,*BWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWv   QWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWA-     xQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWP   QWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWQ-     ,#WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWq  `QWWRkWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWdWWWW>    _jQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWq  ~Qm,  ^QWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWQ_ ^QWb  `|WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWm  7=  !RWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWa  yWQ~ >gWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWt    ~KWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWJ  !j; }WWWRfQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ+   ?QWNQWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWY    :+QQUi`LQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ'   *~` ~QWWWWWWWWWWWWWW WWWWWWWWWWWWWWW&WWWt    `+o=^+kQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNf|cGQX      ;mQWWWWWWWWWWWWWWW WWWWWWWWWWWWWWN ;gg:   'X;     ~gWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ^     ,U~ -=?RWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWQ  `~;-  X~       .RWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ,       _d` ^QWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWW;`Y,'''_X *|Uj`   ~WWWWWWWWWWWWWWWWWWWWWWWWWWWW=    z6iL I^~&WWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWR- =^~',^uQhQQ;   'QWQDXof{}yk#WWWWQUy}{fyGDQWQ;   'QQGQ}r,'_iQWWWWWWWWWWWWWWWWWW WWWQUt>!~,,',,~!+k,      yyr,    vJ,~;+*;-    JQWI    `;*=;~,zo    '^Jq      ,R*!~,,',,~;>zhQWWW Wm_   `~^7*,     n-    !\\\\w|     =5    7^'m|   =QQ>   !q'~a    77     ;6c^    -o     ,+z^;`   ,}W W'  '|d; +g~     `z\\\\~``7QQX=^^>c!    iXiz\\\\   'NWWN~   =ziZ\\\\    ~v>+^=yQQy``,|z'     'd= ,di,  `W WQ|`. -|If'k?`    .;7jyyo,z7!,      cU'\\\\;   ~NWWWWQ+   ~7'Xy`     ,;7j'5j5jz;.     *K'fji- .`+8W WWWQy~  `^i6^Z^        `>.,;      ,o7Xi`  ;AQWWWWWWQq^   >Xcm,      ;~`*-        ~S+Zzr`  ,IQWWW WWWWWWQy^` `^*X6*`               i6v;  ,Ljo>>**?|Li\\\\cjoL~  ~i6u`               ^6H|^- `;{QWWWWWW WWWWWWw~~*?*^,` ;}|'           ,k?'~>?|!`              `;||*~'^U;           `|fr  ,^*??;;RWWWWWW WWWWQ^    '^s^=*>>7qy^`      'Zk7|!,''                    ``,!?cmS_      `!nK7>>*>!PL     cQWWWW WWWQ;      g'`       '>L;` .\\\\j,      ,*\\\\\\\\iL|?*>=+^^!!;;~~^'      ,It. `;L*,       `g' `    7WWWW WWQ_ `  ^z y{'          '+=|'          7WWWWWWWWWWWWWWWWy`         .|>='          .R`jH` :` SWWW WW^ ^m 'Wmjq;                           ;#WWWWWWWWWWWWQ;                           aGxjS *g_`mWW Wo`yQi`k* zS                             'RWWWWWWWWWWQ~                            `s~`q^'QQ>'QW W{#WW~az  S'                              .RWWWWWWWWg,                              `6 `m!DWWNQW WWWWWaz? ^P                                'gWWWWWWQ,                                J^ ^jzQWWWW WWWWWQWQ!a*                                 +QWWWWWz                                 ;S:QWQWWWWW WWWWWWWWQQ;                                 `QWWWWQ_                                 'QQWWWWWWWW WWWWWWWWWQ+                                 'QWWWWQ;                                 :QWWWWWWWWW WWWWWWWWWWG                                `wWWWWWWd.                                tWWWWWWWWWW WWWWWWWWWWWz                             `>QWWWWWWWWQ\\\\`                             >QWWWWWWWWWW WWWWWWWWWWWWK>`                        ~xNWWWWWWWWWWWWQI;`                       `^HWWWWWWWWWWWW WWWWWWWWWWWWWWWRoL!_'`          `,;*}DQWWWWWWWWWWWWWWWWWWQDj|;,.          `-,!|jRWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWQWWWWQQQQQQQQWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWQQQQQQQQWWWWQWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWQQQQQQWWWWWWWWWWWWWWWWWWQQQQQQWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWQQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQQQWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW '||''''|'|| '||'  '|''||''|. '||    ||'               '||                  '||''|.                 .'|.|| '||         ||  .   '|. '|.  .'  ||   || |||  |||  .... .. .. ..  || ...   .... ... .. ||   ||... ..   ...  .||. ...  ||  ....   ||''|    ||  ||  |   ||'''|. |'|..'||.|...|| || || || ||'  ||.|...|| ||' ''||...|' ||' ''.|  '|. ||   ||  ||.|...||  ||        ||| |||    ||    ||| '|' ||||      || || || ||    |||      ||    ||      ||    ||   || ||   ||  ||||       .||.        |   |    .||...|'.|. | .||.'|...'.|| || ||.'|...'  '|...'.||.  .||.    .||.    '|..|'.||. .||..||.'|emberProfile\\\"          :   FWBMemberProfile is an ERC-721 Contract that allows Friends With Benefits members to  mint a \\\"MemberProfile\\\" NFT. Token URI's point to off-chain metadata containing member profile data. This version is intended only as a test, and does not implement access  controls outside of a single permissioned contract owner.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FWBMemberProfile.sol\":\"FWBMemberProfile\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/FWBMemberProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n------------------------------------------------------------------------------------------------\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNx>+|}dWWWWWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWy`      _dWWWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQUr^*JPf, `XWWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW&'  ~QWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ?'-,*BWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWv   QWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWA-     xQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWP   QWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWWWWWWWQ-     ,#WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWq  `QWWRkWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWWdWWWW>    _jQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWq  ~Qm,  ^QWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWQ_ ^QWb  `|WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWm  7=  !RWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWa  yWQ~ >gWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWt    ~KWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWJ  !j; }WWWRfQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ+   ?QWNQWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWY    :+QQUi`LQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ'   *~` ~QWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWW&WWWt    `+o=^+kQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNf|cGQX      ;mQWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWN ;gg:   'X;     ~gWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ^     ,U~ -=?RWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWQ  `~;-  X~       .RWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ,       _d` ^QWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWW;`Y,'''_X *|Uj`   ~WWWWWWWWWWWWWWWWWWWWWWWWWWWW=    z6iL I^~&WWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWR- =^~',^uQhQQ;   'QWQDXof{}yk#WWWWQUy}{fyGDQWQ;   'QQGQ}r,'_iQWWWWWWWWWWWWWWWWWW\\nWWWQUt>!~,,',,~!+k,      yyr,    vJ,~;+*;-    JQWI    `;*=;~,zo    '^Jq      ,R*!~,,',,~;>zhQWWW\\nWm_   `~^7*,     n-    !\\\\w|     =5    7^'m|   =QQ>   !q'~a    77     ;6c^    -o     ,+z^;`   ,}W\\nW'  '|d; +g~     `z\\\\~``7QQX=^^>c!    iXiz\\\\   'NWWN~   =ziZ\\\\    ~v>+^=yQQy``,|z'     'd= ,di,  `W\\nWQ|`. -|If'k?`    .;7jyyo,z7!,      cU'\\\\;   ~NWWWWQ+   ~7'Xy`     ,;7j'5j5jz;.     *K'fji- .`+8W\\nWWWQy~  `^i6^Z^        `>.,;      ,o7Xi`  ;AQWWWWWWQq^   >Xcm,      ;~`*-        ~S+Zzr`  ,IQWWW\\nWWWWWWQy^` `^*X6*`               i6v;  ,Ljo>>**?|Li\\\\cjoL~  ~i6u`               ^6H|^- `;{QWWWWWW\\nWWWWWWw~~*?*^,` ;}|'           ,k?'~>?|!`              `;||*~'^U;           `|fr  ,^*??;;RWWWWWW\\nWWWWQ^    '^s^=*>>7qy^`      'Zk7|!,''                    ``,!?cmS_      `!nK7>>*>!PL     cQWWWW\\nWWWQ;      g'`       '>L;` .\\\\j,      ,*\\\\\\\\iL|?*>=+^^!!;;~~^'      ,It. `;L*,       `g' `    7WWWW\\nWWQ_ `  ^z y{'          '+=|'          7WWWWWWWWWWWWWWWWy`         .|>='          .R`jH` :` SWWW\\nWW^ ^m 'Wmjq;                           ;#WWWWWWWWWWWWQ;                           aGxjS *g_`mWW\\nWo`yQi`k* zS                             'RWWWWWWWWWWQ~                            `s~`q^'QQ>'QW\\nW{#WW~az  S'                              .RWWWWWWWWg,                              `6 `m!DWWNQW\\nWWWWWaz? ^P                                'gWWWWWWQ,                                J^ ^jzQWWWW\\nWWWWWQWQ!a*                                 +QWWWWWz                                 ;S:QWQWWWWW\\nWWWWWWWWQQ;                                 `QWWWWQ_                                 'QQWWWWWWWW\\nWWWWWWWWWQ+                                 'QWWWWQ;                                 :QWWWWWWWWW\\nWWWWWWWWWWG                                `wWWWWWWd.                                tWWWWWWWWWW\\nWWWWWWWWWWWz                             `>QWWWWWWWWQ\\\\`                             >QWWWWWWWWWW\\nWWWWWWWWWWWWK>`                        ~xNWWWWWWWWWWWWQI;`                       `^HWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWRoL!_'`          `,;*}DQWWWWWWWWWWWWWWWWWWQDj|;,.          `-,!|jRWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWQWWWWQQQQQQQQWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWQQQQQQQQWWWWQWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWQQQQQQWWWWWWWWWWWWWWWWWWQQQQQQWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWQQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQQQWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\n                                                                                                                                                                       \\n'||''''|'|| '||'  '|''||''|. '||    ||'               '||                  '||''|.                 .'|.|| '||        \\n ||  .   '|. '|.  .'  ||   || |||  |||  .... .. .. ..  || ...   .... ... .. ||   ||... ..   ...  .||. ...  ||  ....  \\n ||''|    ||  ||  |   ||'''|. |'|..'||.|...|| || || || ||'  ||.|...|| ||' ''||...|' ||' ''.|  '|. ||   ||  ||.|...|| \\n ||        ||| |||    ||    ||| '|' ||||      || || || ||    |||      ||    ||      ||    ||   || ||   ||  ||||      \\n.||.        |   |    .||...|'.|. | .||.'|...'.|| || ||.'|...'  '|...'.||.  .||.    .||.    '|..|'.||. .||..||.'|...'                                                                                                                                                                                                                                                                                                        \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nTESTNET V0\\n\\n\\\"FWBMemberProfile\\\"          :   FWBMemberProfile is an ERC-721 Contract that allows Friends With Benefits members to \\n                                mint a \\\"MemberProfile\\\" NFT. Token URI's point to off-chain metadata containing member\\n                                profile data. This version is intended only as a test, and does not implement access \\n                                controls outside of a single permissioned contract owner.\\n\\n@author                     :   @computerdata / @bretth18\\n@title                      :   FWBMemberProfile\\n@dev                        :   Token URI's and baseURI can be set via permissioned owner. Ownership is transferrable.\\n                                This version uses openzeppelin ERC721URIStorage, Ownable and Counters for ease and\\n                                security purposes.\\n\\n */\\ncontract FWBMemberProfile is ERC721URIStorage, Ownable {\\n   \\n    /// Counters library is used for safe enumeration\\n    using Counters for Counters.Counter;\\n    /// Private variable for tracking tokenIds\\n    Counters.Counter private _tokenIdCounter;\\n    /// String variable to hold our baseURI\\n    string public baseURI;\\n\\n\\n    /// Constructor\\n    constructor() ERC721(\\\"FWB Member Profile v0\\\", \\\"FWBMPv0\\\"){}\\n\\n\\n    /* \\n            mint()\\n    @notice Mints a new FWBMemberProfile token to the calling \\n            address and increments the total tokenId count.\\n    @dev    safeMint is used to ensure tokenId does not exist \\n            and the receiver has implemented onERC721Received.\\n\\n    @param  to The address of the receipient of the token.\\n    **/\\n    function mint() public  {\\n        // call _safeMint\\n        _safeMint(msg.sender, _tokenIdCounter.current());\\n        /// Increment token id\\n        _tokenIdCounter.increment();\\n    }\\n\\n\\n    /* \\n            setBaseURI()\\n    @notice sets the token's baseURI, permissioned for\\n            contract owner access only.\\n    @dev    baseURI is not set by default. this function \\n            should be called by the contract owner.\\n\\n    @param  newURI the replacement string URI (e.g \\\"ipfs://\\\")\\n    **/\\n    function setBaseURI(string memory newURI) external onlyOwner  {\\n        baseURI = newURI;\\n    }\\n\\n\\n\\n\\n    /// Overrides\\n\\n    /*\\n            _baseURI()\\n    @notice override function for baseURI.\\n    @dev    baseURI is not set by default.\\n    @return string containing the base URI. \\n    **/\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n\\n    /// Required solidity overrides\\n    function _burn(uint256 tokenId) internal override(ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n\\n}\",\"keccak256\":\"0x8af54cf24b6b70545ab7cdec326470530aede7797296751e5f48209d60ac4683\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80636c0360eb116100ad578063a22cb46511610071578063a22cb46514610241578063b88d4fde14610254578063c87b56dd14610267578063e985e9c51461027a578063f2fde38b146102b657600080fd5b80636c0360eb146101f757806370a08231146101ff578063715018a6146102205780638da5cb5b1461022857806395d89b411461023957600080fd5b80631249c58b116100f45780631249c58b146101a357806323b872dd146101ab57806342842e0e146101be57806355f804b3146101d15780636352211e146101e457600080fd5b806301ffc9a71461012657806306fdde031461014e578063081812fc14610163578063095ea7b31461018e575b600080fd5b6101396101343660046115a8565b6102c9565b60405190151581526020015b60405180910390f35b61015661031b565b60405161014591906116d6565b610176610171366004611626565b6103ad565b6040516001600160a01b039091168152602001610145565b6101a161019c36600461157f565b610447565b005b6101a161055d565b6101a16101b9366004611491565b61057f565b6101a16101cc366004611491565b6105b0565b6101a16101df3660046115e0565b6105cb565b6101766101f2366004611626565b61060c565b610156610683565b61021261020d366004611445565b610711565b604051908152602001610145565b6101a1610798565b6007546001600160a01b0316610176565b6101566107cc565b6101a161024f366004611545565b6107db565b6101a16102623660046114cc565b6108a0565b610156610275366004611626565b6108d8565b61013961028836600461145f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101a16102c4366004611445565b6108e3565b60006001600160e01b031982166380ac58cd60e01b14806102fa57506001600160e01b03198216635b5e139f60e01b145b8061031557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461032a90611830565b80601f016020809104026020016040519081016040528092919081815260200182805461035690611830565b80156103a35780601f10610378576101008083540402835291602001916103a3565b820191906000526020600020905b81548152906001019060200180831161038657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661042b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104528261060c565b9050806001600160a01b0316836001600160a01b031614156104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610422565b336001600160a01b03821614806104dc57506104dc8133610288565b61054e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610422565b610558838361097e565b505050565b61056f3361056a60085490565b6109ec565b61057d600880546001019055565b565b6105893382610a06565b6105a55760405162461bcd60e51b815260040161042290611770565b610558838383610afd565b610558838383604051806020016040528060008152506108a0565b6007546001600160a01b031633146105f55760405162461bcd60e51b81526004016104229061173b565b805161060890600990602084019061131a565b5050565b6000818152600260205260408120546001600160a01b0316806103155760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610422565b6009805461069090611830565b80601f01602080910402602001604051908101604052809291908181526020018280546106bc90611830565b80156107095780601f106106de57610100808354040283529160200191610709565b820191906000526020600020905b8154815290600101906020018083116106ec57829003601f168201915b505050505081565b60006001600160a01b03821661077c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610422565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b031633146107c25760405162461bcd60e51b81526004016104229061173b565b61057d6000610c9d565b60606001805461032a90611830565b6001600160a01b0382163314156108345760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610422565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6108aa3383610a06565b6108c65760405162461bcd60e51b815260040161042290611770565b6108d284848484610cef565b50505050565b606061031582610d22565b6007546001600160a01b0316331461090d5760405162461bcd60e51b81526004016104229061173b565b6001600160a01b0381166109725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610422565b61097b81610c9d565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109b38261060c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610608828260405180602001604052806000815250610e94565b6000818152600260205260408120546001600160a01b0316610a7f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610422565b6000610a8a8361060c565b9050806001600160a01b0316846001600160a01b03161480610ac55750836001600160a01b0316610aba846103ad565b6001600160a01b0316145b80610af557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610b108261060c565b6001600160a01b031614610b785760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610422565b6001600160a01b038216610bda5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610422565b610be560008261097e565b6001600160a01b0383166000908152600360205260408120805460019290610c0e9084906117ed565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c3c9084906117c1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610cfa848484610afd565b610d0684848484610ec7565b6108d25760405162461bcd60e51b8152600401610422906116e9565b6000818152600260205260409020546060906001600160a01b0316610da35760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610422565b60008281526006602052604081208054610dbc90611830565b80601f0160208091040260200160405190810160405280929190818152602001828054610de890611830565b8015610e355780601f10610e0a57610100808354040283529160200191610e35565b820191906000526020600020905b815481529060010190602001808311610e1857829003601f168201915b505050505090506000610e46610fd4565b9050805160001415610e59575092915050565b815115610e8b578082604051602001610e7392919061166a565b60405160208183030381529060405292505050919050565b610af584610fe3565b610e9e83836110be565b610eab6000848484610ec7565b6105585760405162461bcd60e51b8152600401610422906116e9565b60006001600160a01b0384163b15610fc957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610f0b903390899088908890600401611699565b602060405180830381600087803b158015610f2557600080fd5b505af1925050508015610f55575060408051601f3d908101601f19168201909252610f52918101906115c4565b60015b610faf573d808015610f83576040519150601f19603f3d011682016040523d82523d6000602084013e610f88565b606091505b508051610fa75760405162461bcd60e51b8152600401610422906116e9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610af5565b506001949350505050565b60606009805461032a90611830565b6000818152600260205260409020546060906001600160a01b03166110625760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610422565b600061106c610fd4565b9050600081511161108c57604051806020016040528060008152506110b7565b8061109684611200565b6040516020016110a792919061166a565b6040516020818303038152906040525b9392505050565b6001600160a01b0382166111145760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610422565b6000818152600260205260409020546001600160a01b0316156111795760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610422565b6001600160a01b03821660009081526003602052604081208054600192906111a29084906117c1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060816112245750506040805180820190915260018152600360fc1b602082015290565b8160005b811561124e57806112388161186b565b91506112479050600a836117d9565b9150611228565b60008167ffffffffffffffff81111561127757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156112a1576020820181803683370190505b5090505b8415610af5576112b66001836117ed565b91506112c3600a86611886565b6112ce9060306117c1565b60f81b8183815181106112f157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611313600a866117d9565b94506112a5565b82805461132690611830565b90600052602060002090601f016020900481019282611348576000855561138e565b82601f1061136157805160ff191683800117855561138e565b8280016001018555821561138e579182015b8281111561138e578251825591602001919060010190611373565b5061139a92915061139e565b5090565b5b8082111561139a576000815560010161139f565b600067ffffffffffffffff808411156113ce576113ce6118c6565b604051601f8501601f19908116603f011681019082821181831017156113f6576113f66118c6565b8160405280935085815286868601111561140f57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461144057600080fd5b919050565b600060208284031215611456578081fd5b6110b782611429565b60008060408385031215611471578081fd5b61147a83611429565b915061148860208401611429565b90509250929050565b6000806000606084860312156114a5578081fd5b6114ae84611429565b92506114bc60208501611429565b9150604084013590509250925092565b600080600080608085870312156114e1578081fd5b6114ea85611429565b93506114f860208601611429565b925060408501359150606085013567ffffffffffffffff81111561151a578182fd5b8501601f8101871361152a578182fd5b611539878235602084016113b3565b91505092959194509250565b60008060408385031215611557578182fd5b61156083611429565b915060208301358015158114611574578182fd5b809150509250929050565b60008060408385031215611591578182fd5b61159a83611429565b946020939093013593505050565b6000602082840312156115b9578081fd5b81356110b7816118dc565b6000602082840312156115d5578081fd5b81516110b7816118dc565b6000602082840312156115f1578081fd5b813567ffffffffffffffff811115611607578182fd5b8201601f81018413611617578182fd5b610af5848235602084016113b3565b600060208284031215611637578081fd5b5035919050565b60008151808452611656816020860160208601611804565b601f01601f19169290920160200192915050565b6000835161167c818460208801611804565b835190830190611690818360208801611804565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906116cc9083018461163e565b9695505050505050565b6020815260006110b7602083018461163e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156117d4576117d461189a565b500190565b6000826117e8576117e86118b0565b500490565b6000828210156117ff576117ff61189a565b500390565b60005b8381101561181f578181015183820152602001611807565b838111156108d25750506000910152565b600181811c9082168061184457607f821691505b6020821081141561186557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561187f5761187f61189a565b5060010190565b600082611895576118956118b0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461097b57600080fdfea264697066735822122096693be378979b72d2d843b833b5f3181a0e1578572deb8869d239a1693b62ca64736f6c63430008040033",
  "devdoc": {
    "author": ":   @computerdata / @bretth18",
    "details": ":   Token URI's and baseURI can be set via permissioned owner. Ownership is transferrable. This version uses openzeppelin ERC721URIStorage, Ownable and Counters for ease and security purposes.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": ":   FWBMemberProfile",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseURI()": {
        "notice": "String variable to hold our baseURI"
      },
      "constructor": {
        "notice": "Constructor"
      }
    },
    "notice": "------------------------------------------------------------------------------------------------ WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNx>+|}dWWWWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWy`      _dWWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQUr^*JPf, `XWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW&'  ~QWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWQ?'-,*BWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWv   QWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWA-     xQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWP   QWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWQ-     ,#WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWq  `QWWRkWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWdWWWW>    _jQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWq  ~Qm,  ^QWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWQ_ ^QWb  `|WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWm  7=  !RWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWa  yWQ~ >gWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWt    ~KWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWJ  !j; }WWWRfQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ+   ?QWNQWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWY    :+QQUi`LQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ'   *~` ~QWWWWWWWWWWWWWW WWWWWWWWWWWWWWW&WWWt    `+o=^+kQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNf|cGQX      ;mQWWWWWWWWWWWWWWW WWWWWWWWWWWWWWN ;gg:   'X;     ~gWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ^     ,U~ -=?RWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWQ  `~;-  X~       .RWWWWWWWWWWWWWWWWWWWWWWWWWWWWQ,       _d` ^QWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWW;`Y,'''_X *|Uj`   ~WWWWWWWWWWWWWWWWWWWWWWWWWWWW=    z6iL I^~&WWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWR- =^~',^uQhQQ;   'QWQDXof{}yk#WWWWQUy}{fyGDQWQ;   'QQGQ}r,'_iQWWWWWWWWWWWWWWWWWW WWWQUt>!~,,',,~!+k,      yyr,    vJ,~;+*;-    JQWI    `;*=;~,zo    '^Jq      ,R*!~,,',,~;>zhQWWW Wm_   `~^7*,     n-    !\\w|     =5    7^'m|   =QQ>   !q'~a    77     ;6c^    -o     ,+z^;`   ,}W W'  '|d; +g~     `z\\~``7QQX=^^>c!    iXiz\\   'NWWN~   =ziZ\\    ~v>+^=yQQy``,|z'     'd= ,di,  `W WQ|`. -|If'k?`    .;7jyyo,z7!,      cU'\\;   ~NWWWWQ+   ~7'Xy`     ,;7j'5j5jz;.     *K'fji- .`+8W WWWQy~  `^i6^Z^        `>.,;      ,o7Xi`  ;AQWWWWWWQq^   >Xcm,      ;~`*-        ~S+Zzr`  ,IQWWW WWWWWWQy^` `^*X6*`               i6v;  ,Ljo>>**?|Li\\cjoL~  ~i6u`               ^6H|^- `;{QWWWWWW WWWWWWw~~*?*^,` ;}|'           ,k?'~>?|!`              `;||*~'^U;           `|fr  ,^*??;;RWWWWWW WWWWQ^    '^s^=*>>7qy^`      'Zk7|!,''                    ``,!?cmS_      `!nK7>>*>!PL     cQWWWW WWWQ;      g'`       '>L;` .\\j,      ,*\\\\iL|?*>=+^^!!;;~~^'      ,It. `;L*,       `g' `    7WWWW WWQ_ `  ^z y{'          '+=|'          7WWWWWWWWWWWWWWWWy`         .|>='          .R`jH` :` SWWW WW^ ^m 'Wmjq;                           ;#WWWWWWWWWWWWQ;                           aGxjS *g_`mWW Wo`yQi`k* zS                             'RWWWWWWWWWWQ~                            `s~`q^'QQ>'QW W{#WW~az  S'                              .RWWWWWWWWg,                              `6 `m!DWWNQW WWWWWaz? ^P                                'gWWWWWWQ,                                J^ ^jzQWWWW WWWWWQWQ!a*                                 +QWWWWWz                                 ;S:QWQWWWWW WWWWWWWWQQ;                                 `QWWWWQ_                                 'QQWWWWWWWW WWWWWWWWWQ+                                 'QWWWWQ;                                 :QWWWWWWWWW WWWWWWWWWWG                                `wWWWWWWd.                                tWWWWWWWWWW WWWWWWWWWWWz                             `>QWWWWWWWWQ\\`                             >QWWWWWWWWWW WWWWWWWWWWWWK>`                        ~xNWWWWWWWWWWWWQI;`                       `^HWWWWWWWWWWWW WWWWWWWWWWWWWWWRoL!_'`          `,;*}DQWWWWWWWWWWWWWWWWWWQDj|;,.          `-,!|jRWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWQWWWWQQQQQQQQWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWQQQQQQQQWWWWQWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWQQQQQQWWWWWWWWWWWWWWWWWWQQQQQQWWWWWWWWWWWWQWWWWWWWWWWWWWWWWWWWW WWWWWWWWWWWWWWWQQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQQQWWWWWWWWWWWWWW WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW '||''''|'|| '||'  '|''||''|. '||    ||'               '||                  '||''|.                 .'|.|| '||         ||  .   '|. '|.  .'  ||   || |||  |||  .... .. .. ..  || ...   .... ... .. ||   ||... ..   ...  .||. ...  ||  ....   ||''|    ||  ||  |   ||'''|. |'|..'||.|...|| || || || ||'  ||.|...|| ||' ''||...|' ||' ''.|  '|. ||   ||  ||.|...||  ||        ||| |||    ||    ||| '|' ||||      || || || ||    |||      ||    ||      ||    ||   || ||   ||  ||||       .||.        |   |    .||...|'.|. | .||.'|...'.|| || ||.'|...'  '|...'.||.  .||.    .||.    '|..|'.||. .||..||.'|emberProfile\"          :   FWBMemberProfile is an ERC-721 Contract that allows Friends With Benefits members to  mint a \"MemberProfile\" NFT. Token URI's point to off-chain metadata containing member profile data. This version is intended only as a test, and does not implement access  controls outside of a single permissioned contract owner.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1158,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1160,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1164,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1168,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1172,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1178,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2433,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 387,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3283,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)2958_storage"
      },
      {
        "astId": 3286,
        "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
        "label": "baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2958_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2957,
            "contract": "contracts/FWBMemberProfile.sol:FWBMemberProfile",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}