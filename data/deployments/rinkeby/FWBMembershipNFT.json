{
  "address": "0x3eEC387926583887961Cdc3eb1F8D9A58f6e76B4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "adminMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "adminRevokeMemberships",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_urlBase",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mintWithSign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "checkTokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "transferWithSign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUrlBase",
          "type": "string"
        }
      ],
      "name": "updateUrlBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "urlBase",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb30c1824659d98e868e92127ea8f87840f2a6ae3b5e1dc1384f660dc0314ca6",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0x3eEC387926583887961Cdc3eb1F8D9A58f6e76B4",
    "transactionIndex": 29,
    "gasUsed": "2588177",
    "logsBloom": "0x
    "blockHash": "0x3494483098d698bf74c66b930c42b4aba374e90cafb8c920f8df4bb455be27a6",
    "transactionHash": "0xdb30c1824659d98e868e92127ea8f87840f2a6ae3b5e1dc1384f660dc0314ca6",
    "logs": [],
    "blockNumber": 10015709,
    "cumulativeGasUsed": "5845382",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b61eb1bc0da2ee29f8ddcd65300fb476",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"adminRevokeMemberships\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_urlBase\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintWithSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkTokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transferWithSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUrlBase\",\"type\":\"string\"}],\"name\":\"updateUrlBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"urlBase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressToId(address)\":{\"notice\":\"Stores address to membership id\"},\"adminMint(address,uint256)\":{\"notice\":\"Mint mew membership from the manager role\"},\"adminRevokeMemberships(uint256[])\":{\"notice\":\"Admin function to revoke membership for user\"},\"approve(address,uint256)\":{\"notice\":\"approvals not supported\"},\"balanceOf(address)\":{\"notice\":\"blanaceOf getter for NFT compat\"},\"getApproved(uint256)\":{\"notice\":\"approvals not supported\"},\"initialize(string,address)\":{\"notice\":\"Upgradeable init fn\"},\"isApprovedForAll(address,address)\":{\"notice\":\"approvals not supported\"},\"mintWithSign(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Mint with signed message data\"},\"name()\":{\"notice\":\"NFT Metadata Name\"},\"ownerOf(uint256)\":{\"notice\":\"ownerOf getter, checks if token exists\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"not supported\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"not supported\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"approvals not supported\"},\"symbol()\":{\"notice\":\"NFT Metadata Symbol\"},\"tokenURI(uint256)\":{\"notice\":\"Getter for url server nft base\"},\"totalSupply()\":{\"notice\":\"erc721 enumerable partial impl\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Admin function to transfer a wallet to a new NFT address\"},\"transferWithSign(address,address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Transfer with signed message data\"},\"updateUrlBase(string)\":{\"notice\":\"admin function to update base uri\"},\"urlBase()\":{\"notice\":\"URLBase for metadata\"},\"usedNonces(uint256)\":{\"notice\":\"list of used signature nonces\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FWBMembershipNFT.sol\":\"FWBMembershipNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271Upgradeable {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x1762ac67d230279d7fb183567ce22bbe202054ce08f94224d8794f9d19546d51\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../AddressUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1271Upgradeable.sol\\\";\\n\\n/**\\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\\n * ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with\\n * smart contract wallets such as Argent and Gnosis.\\n *\\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\\n * through time. It could return true at block N and false at block N+1 (or the opposite).\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureCheckerUpgradeable {\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\\n        if (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271Upgradeable.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x5d8be66ac1a8b308731f4b64991c895db5ff0fa41f11a0f4a7b74a2aad94c221\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x92e61d8dd5ba90b513769c06da820e0a8f5d93810a9c6d5207308af345815011\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/FWBMembershipNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {FWBMembershipSkeletonNFT} from \\\"./FWBMembershipSkeletonNFT.sol\\\";\\nimport {EIP712Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {SignatureCheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n// FWB Core membership contract (Updatable)\\ncontract FWBMembershipNFT is\\n    OwnableUpgradeable,\\n    FWBMembershipSkeletonNFT,\\n    EIP712Upgradeable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable\\n{\\n    bytes32 public constant SIGNER_ROLE = keccak256(\\\"SIGNER_ROLE\\\");\\n    bytes32 public constant NFT_MANAGER_ROLE = keccak256(\\\"NFT_MANAGER_ROLE\\\");\\n\\n    /// @notice URLBase for metadata\\n    string public urlBase;\\n\\n    /// @notice Upgradeable init fn\\n    function initialize(string memory _urlBase, address admin)\\n        public\\n        initializer\\n    {\\n        __EIP712_init(\\\"FWBMembershipNFT\\\", \\\"1\\\");\\n        __UUPSUpgradeable_init();\\n        __ERC165_init();\\n        __AccessControl_init();\\n        _grantRole(AccessControlUpgradeable.DEFAULT_ADMIN_ROLE, admin);\\n\\n        urlBase = _urlBase;\\n    }\\n\\n    /**\\n        Admin permission functions and modifiers\\n     */\\n\\n    /// @notice UUPS admin upgrade permission fn\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        // only owner can upgrade contract\\n    }\\n\\n    /**\\n        URI Management tools\\n     */\\n\\n    /// @notice admin function to update base uri\\n    function updateUrlBase(string memory newUrlBase)\\n        external\\n        onlyRole(NFT_MANAGER_ROLE)\\n    {\\n        urlBase = newUrlBase;\\n    }\\n\\n    /// @notice Getter for url server nft base\\n    function tokenURI(uint256 id) external view returns (string memory) {\\n        require(_exists(id), \\\"ERC721: Token does not exist\\\");\\n        return\\n            string(abi.encodePacked(urlBase, StringsUpgradeable.toString(id)));\\n    }\\n\\n    /// @notice Admin function to revoke membership for user\\n    function adminRevokeMemberships(uint256[] memory ids)\\n        external\\n        onlyRole(NFT_MANAGER_ROLE)\\n    {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _burn(ids[i]);\\n        }\\n    }\\n\\n    function burn(uint256 id) external {\\n        require(msg.sender == ownerOf(id), \\\"NFT Burn: needs to be owner\\\");\\n        _burn(id);\\n    }\\n\\n    /// @notice Admin function to transfer a wallet to a new NFT address\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 checkTokenId\\n    ) external override onlyRole(NFT_MANAGER_ROLE) {\\n        uint256 tokenId = addressToId[from];\\n        require(checkTokenId == tokenId, \\\"ERR: Token ID mismatch\\\");\\n\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /// Mint mew membership from the manager role\\n    function adminMint(address to, uint256 id)\\n        external\\n        onlyRole(NFT_MANAGER_ROLE)\\n    {\\n        _safeMint(to, id);\\n    }\\n\\n    /// @notice list of used signature nonces\\n    mapping(uint256 => bool) public usedNonces;\\n\\n    /// @notice modifier for valid nonce with signature-based call\\n    modifier withValidNonceAndDeadline(uint256 nonce, uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"Deadline time passed\\\");\\n        require(!usedNonces[nonce], \\\"nonce used\\\");\\n        usedNonces[nonce] = true;\\n        _;\\n    }\\n\\n    modifier needsRole(bytes32 role, address account) {\\n        _checkRole(role, account);\\n        _;\\n    }\\n\\n    /// @notice signature permitted mint function typehash\\n    bytes32 private immutable _PERMIT_MINT_TYPEHASH =\\n        keccak256(\\n            \\\"PermitMint(address signer,address to,uint256 tokenId,uint256 deadline,uint256 nonce)\\\"\\n        );\\n\\n    /// @notice Mint with signed message data\\n    function mintWithSign(\\n        address signer,\\n        address to,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint256 nonce,\\n        bytes memory signature\\n    )\\n        external\\n        withValidNonceAndDeadline(nonce, deadline)\\n        needsRole(SIGNER_ROLE, signer)\\n    {\\n        // We allow any user to execute a signature to mint the NFt.\\n        require(to == msg.sender, \\\"Needs to be receiving wallet\\\");\\n\\n        require(\\n            SignatureCheckerUpgradeable.isValidSignatureNow(\\n                // signer is the signer\\n                signer,\\n                _hashTypedDataV4(\\n                    keccak256(\\n                        abi.encode(\\n                            _PERMIT_MINT_TYPEHASH,\\n                            signer,\\n                            to,\\n                            tokenId,\\n                            deadline,\\n                            nonce\\n                        )\\n                    )\\n                ),\\n                signature\\n            ),\\n            \\\"NFTPermit::mintWithSign: Invalid signature\\\"\\n        );\\n\\n        _safeMint(to, tokenId);\\n    }\\n\\n    bytes32 private immutable _PERMIT_TRANSFER_TYPEHASH =\\n        keccak256(\\n            \\\"PermitTransfer(address signer,address from,address to,uint256 tokenId,uint256 deadline,uint256 nonce)\\\"\\n        );\\n\\n    /// @notice Transfer with signed message data\\n    function transferWithSign(\\n        address signer,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint256 nonce,\\n        bytes memory signature\\n    )\\n        external\\n        withValidNonceAndDeadline(nonce, deadline)\\n        needsRole(SIGNER_ROLE, signer)\\n    {\\n        require(to == msg.sender, \\\"Needs to be receiving wallet\\\");\\n\\n        require(\\n            SignatureCheckerUpgradeable.isValidSignatureNow(\\n                signer,\\n                _hashTypedDataV4(\\n                    keccak256(\\n                        abi.encode(\\n                            _PERMIT_TRANSFER_TYPEHASH,\\n                            signer,\\n                            from,\\n                            to,\\n                            tokenId,\\n                            deadline,\\n                            nonce\\n                        )\\n                    )\\n                ),\\n                signature\\n            ),\\n            \\\"NFTPermit::transferWithSign: Invalid signature\\\"\\n        );\\n\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(FWBMembershipSkeletonNFT, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            FWBMembershipSkeletonNFT.supportsInterface(interfaceId) ||\\n            AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2e15adeb401c1ee283da4e00c479e39fe5f2f3c2df427d36f2cf52f587ac1b84\",\"license\":\"MIT\"},\"contracts/FWBMembershipSkeletonNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {IERC721MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\n/// @notice Base non-transferrable optimized nft contract for FWB\\nabstract contract FWBMembershipSkeletonNFT is\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /// @notice Counter for totalSupply\\n    CountersUpgradeable.Counter numberTokens;\\n\\n    /// @notice Stores address to membership id\\n    mapping(address => uint256) public addressToId;\\n\\n    /// @notice Stores membership id to address\\n    mapping(uint256 => address) private idToAddress;\\n\\n    /// @notice modifier signifying contract function is not supported\\n    modifier notSupported() {\\n        revert(\\\"Fn not supported: nontransferrable NFT\\\");\\n        _;\\n    }\\n\\n    /**\\n        Common NFT functions\\n     */\\n\\n    /// @notice NFT Metadata Name\\n    string public constant name = \\\"FWB Membership NFT\\\";\\n\\n    /// @notice NFT Metadata Symbol\\n    string public constant symbol = \\\"FWBMEM\\\";\\n\\n    /*\\n     *  NFT Functions\\n     */\\n\\n    /// @notice blanaceOf getter for NFT compat\\n    function balanceOf(address user) public view returns (uint256) {\\n        return addressToId[user] == 0 ? 0 : 1;\\n    }\\n\\n    /// @notice ownerOf getter, checks if token exists\\n    function ownerOf(uint256 id) public view returns (address) {\\n        require(\\n            idToAddress[id] != address(0x0),\\n            \\\"ERC721: Token does not exist\\\"\\n        );\\n        return idToAddress[id];\\n    }\\n\\n    /// @notice approvals not supported\\n    function getApproved(uint256) public view returns (address) {\\n        return address(0x0);\\n    }\\n\\n    /// @notice approvals not supported\\n    function isApprovedForAll(address, address) public view returns (bool) {\\n        return false;\\n    }\\n\\n    /// @notice approvals not supported\\n    function approve(address, uint256) public notSupported {}\\n\\n    /// @notice approvals not supported\\n    function setApprovalForAll(address, bool) public notSupported {}\\n\\n    /// @notice internal safemint function\\n    function _safeMint(address to, uint256 id) internal {\\n        require(idToAddress[id] == address(0x0), \\\"Mint: already claimed\\\");\\n        require(\\n            to != address(0x0) && id != 0,\\n            \\\"Mint: cannot mint null id or to\\\"\\n        );\\n        numberTokens.increment();\\n        _transferFrom(address(0x0), to, id);\\n    }\\n\\n    /// @notice transfer function to be overridden\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 checkTokenId\\n    ) external virtual {}\\n\\n    /// @notice not supported\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public notSupported {\\n        // no impl\\n    }\\n\\n    /// @notice not supported\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public notSupported {\\n        // no impl\\n    }\\n\\n    /// @notice erc721 enumerable partial impl\\n    function totalSupply() public view returns (uint256) {\\n        return numberTokens.current();\\n    }\\n\\n    /// @notice Supports ERC721, ERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC165Upgradeable.supportsInterface(interfaceId) ||\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId;\\n    }\\n\\n    /// @notice internal burn for virtual nfts\\n    /// @param id of nft to burn\\n    function _burn(uint256 id) internal {\\n        address from = ownerOf(id);\\n        numberTokens.decrement();\\n        delete idToAddress[id];\\n        delete addressToId[from];\\n        emit Transfer(from, address(0x0), id);\\n    }\\n\\n    /// @notice internal exists fn for a given token id\\n    function _exists(uint256 id) internal view returns (bool) {\\n        return idToAddress[id] != address(0x0);\\n    }\\n\\n    /// @notice internal transfer function for virtual nfts\\n    /// @param from address to move from\\n    /// @param to address to move to\\n    /// @param id id of nft to move\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        addressToId[from] = 0x0;\\n        idToAddress[id] = to;\\n        addressToId[to] = id;\\n        emit Transfer(from, to, id);\\n    }\\n}\\n\",\"keccak256\":\"0xb732b73bcf52750132e4a6df2fd0573ae983a1671454011a2d61c85233e19444\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052306080527f4f5a9b43abfba6b0e28ba2a808658efaea7d2d39624404c8ff1a1bea3d8896ee60a0527f286cb9798e917cf052044cb97622281e6fda7164f5a4ef21acf9ba0aa9b15bf560c05234801561005c57600080fd5b5060805160a05160c051612ddc6100a16000396000610e2401526000610a3a015260008181610bba01528181610bfa01528181610f180152610f580152612ddc6000f3fe60806040526004361061021a5760003560e01c80636717e41c11610123578063a217fddf116100ab578063d547741f1161006f578063d547741f1461069f578063e58306f9146106bf578063e78191ad146106df578063e985e9c5146106f4578063f2fde38b1461071757600080fd5b8063a217fddf14610607578063a22cb4651461061c578063b88d4fde14610637578063c87b56dd14610652578063cb0e0d7d1461067257600080fd5b80638ad44fd5116100f25780638ad44fd5146105415780638da5cb5b1461056357806391d148541461058157806395d89b41146105a1578063a1ebf35d146105d357600080fd5b80636717e41c146104bb57806370a08231146104ec578063715018a61461050c5780637ab4339d1461052157600080fd5b80632f2ff15d116101a657806342842e0e1161017557806342842e0e1461042d57806342966c681461044857806346090571146104685780634f1ef286146104885780636352211e1461049b57600080fd5b80632f2ff15d146103ad578063342623f1146103cd57806336568abe146103ed5780633659cfe61461040d57600080fd5b8063095ea7b3116101ed578063095ea7b3146102fa57806318160ddd1461031a5780631e79ad421461033d57806323b872dd1461035d578063248a9ca31461037d57600080fd5b806301ffc9a71461021f57806302d9e6961461025457806306fdde0314610276578063081812fc146102c1575b600080fd5b34801561022b57600080fd5b5061023f61023a366004612459565b610737565b60405190151581526020015b60405180910390f35b34801561026057600080fd5b5061027461026f36600461252d565b610757565b005b34801561028257600080fd5b506102b4604051806040016040528060128152602001711195d08813595b58995c9cda1a5c0813919560721b81525081565b60405161024b91906125be565b3480156102cd57600080fd5b506102e26102dc3660046125d1565b50600090565b6040516001600160a01b03909116815260200161024b565b34801561030657600080fd5b50610274610315366004612606565b610789565b34801561032657600080fd5b5061032f6107e5565b60405190815260200161024b565b34801561034957600080fd5b50610274610358366004612630565b6107f5565b34801561036957600080fd5b506102746103783660046126d6565b61084e565b34801561038957600080fd5b5061032f6103983660046125d1565b600090815260ce602052604090206001015490565b3480156103b957600080fd5b506102746103c8366004612712565b6108da565b3480156103d957600080fd5b506102746103e836600461273e565b610900565b3480156103f957600080fd5b50610274610408366004612712565b610b31565b34801561041957600080fd5b506102746104283660046127b8565b610baf565b34801561043957600080fd5b506102746103153660046126d6565b34801561045457600080fd5b506102746104633660046125d1565b610c78565b34801561047457600080fd5b506102746104833660046127d3565b610cea565b61027461049636600461285f565b610f0d565b3480156104a757600080fd5b506102e26104b63660046125d1565b610fc3565b3480156104c757600080fd5b5061023f6104d63660046125d1565b6101656020526000908152604090205460ff1681565b3480156104f857600080fd5b5061032f6105073660046127b8565b611043565b34801561051857600080fd5b50610274611074565b34801561052d57600080fd5b5061027461053c3660046128ad565b6110da565b34801561054d57600080fd5b5061032f600080516020612d6083398151915281565b34801561056f57600080fd5b506033546001600160a01b03166102e2565b34801561058d57600080fd5b5061023f61059c366004612712565b611217565b3480156105ad57600080fd5b506102b4604051806040016040528060068152602001654657424d454d60d01b81525081565b3480156105df57600080fd5b5061032f7fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7081565b34801561061357600080fd5b5061032f600081565b34801561062857600080fd5b506102746103153660046128f2565b34801561064357600080fd5b5061027461031536600461292e565b34801561065e57600080fd5b506102b461066d3660046125d1565b611242565b34801561067e57600080fd5b5061032f61068d3660046127b8565b60986020526000908152604090205481565b3480156106ab57600080fd5b506102746106ba366004612712565b6112dc565b3480156106cb57600080fd5b506102746106da366004612606565b611302565b3480156106eb57600080fd5b506102b4611325565b34801561070057600080fd5b5061023f61070f366004612996565b600092915050565b34801561072357600080fd5b506102746107323660046127b8565b6113b4565b60006107428261147c565b806107515750610751826114cd565b92915050565b600080516020612d6083398151915261077081336114f2565b8151610784906101649060208501906123aa565b505050565b60405162461bcd60e51b815260206004820152602660248201527f466e206e6f7420737570706f727465643a206e6f6e7472616e736665727261626044820152651b194813919560d21b60648201526084015b60405180910390fd5b60006107f060975490565b905090565b600080516020612d6083398151915261080e81336114f2565b60005b82518110156107845761083c83828151811061082f5761082f6129c0565b6020026020010151611556565b80610846816129ec565b915050610811565b600080516020612d6083398151915261086781336114f2565b6001600160a01b0384166000908152609860205260409020548281146108c85760405162461bcd60e51b815260206004820152601660248201527508aa4a47440a8ded6cadc40928840dad2e6dac2e8c6d60531b60448201526064016107dc565b6108d38585836115d2565b5050505050565b600082815260ce60205260409020600101546108f681336114f2565b6107848383611648565b8183804211156109495760405162461bcd60e51b8152602060048201526014602482015273111958591b1a5b99481d1a5b59481c185cdcd95960621b60448201526064016107dc565b6000828152610165602052604090205460ff16156109965760405162461bcd60e51b815260206004820152600a6024820152691b9bdb98d9481d5cd95960b21b60448201526064016107dc565b600082815261016560205260409020805460ff191660011790557fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70886109dc82826114f2565b6001600160a01b0389163314610a345760405162461bcd60e51b815260206004820152601c60248201527f4e6565647320746f20626520726563656976696e672077616c6c65740000000060448201526064016107dc565b604080517f000000000000000000000000000000000000000000000000000000000000000060208201526001600160a01b03808d1692820192909252908a1660608201526080810189905260a0810188905260c08101879052610abc908b90610ab69060e0015b604051602081830303815290604052805190602001206116ce565b8761171c565b610b1b5760405162461bcd60e51b815260206004820152602a60248201527f4e46545065726d69743a3a6d696e74576974685369676e3a20496e76616c6964604482015269207369676e617475726560b01b60648201526084016107dc565b610b25898961186a565b50505050505050505050565b6001600160a01b0381163314610ba15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107dc565b610bab8282611944565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610bf85760405162461bcd60e51b81526004016107dc90612a07565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c2a6119ab565b6001600160a01b031614610c505760405162461bcd60e51b81526004016107dc90612a53565b610c59816119d9565b60408051600080825260208201909252610c75918391906119e5565b50565b610c8181610fc3565b6001600160a01b0316336001600160a01b031614610ce15760405162461bcd60e51b815260206004820152601b60248201527f4e4654204275726e3a206e6565647320746f206265206f776e6572000000000060448201526064016107dc565b610c7581611556565b818380421115610d335760405162461bcd60e51b8152602060048201526014602482015273111958591b1a5b99481d1a5b59481c185cdcd95960621b60448201526064016107dc565b6000828152610165602052604090205460ff1615610d805760405162461bcd60e51b815260206004820152600a6024820152691b9bdb98d9481d5cd95960b21b60448201526064016107dc565b600082815261016560205260409020805460ff191660011790557fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7089610dc682826114f2565b6001600160a01b0389163314610e1e5760405162461bcd60e51b815260206004820152601c60248201527f4e6565647320746f20626520726563656976696e672077616c6c65740000000060448201526064016107dc565b604080517f000000000000000000000000000000000000000000000000000000000000000060208201526001600160a01b03808e1692820192909252818c166060820152908a16608082015260a0810189905260c0810188905260e08101879052610e92908c90610ab69061010001610a9b565b610ef55760405162461bcd60e51b815260206004820152602e60248201527f4e46545065726d69743a3a7472616e73666572576974685369676e3a20496e7660448201526d616c6964207369676e617475726560901b60648201526084016107dc565b610f008a8a8a6115d2565b5050505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610f565760405162461bcd60e51b81526004016107dc90612a07565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f886119ab565b6001600160a01b031614610fae5760405162461bcd60e51b81526004016107dc90612a53565b610fb7826119d9565b610bab828260016119e5565b6000818152609960205260408120546001600160a01b03166110275760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20546f6b656e20646f6573206e6f742065786973740000000060448201526064016107dc565b506000908152609960205260409020546001600160a01b031690565b6001600160a01b0381166000908152609860205260408120541561106857600161106b565b60005b60ff1692915050565b6033546001600160a01b031633146110ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107dc565b6110d86000611b29565b565b600054610100900460ff166110f55760005460ff16156110f9565b303b155b61115c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107dc565b600054610100900460ff1615801561117e576000805461ffff19166101011790555b6111c96040518060400160405280601081526020016f1195d093595b58995c9cda1a5c13919560821b815250604051806040016040528060018152602001603160f81b815250611b7b565b6111d1611bac565b6111d9611be3565b6111e1611c0a565b6111ec600083611648565b8251611200906101649060208601906123aa565b508015610784576000805461ff0019169055505050565b600091825260ce602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152609960205260409020546060906001600160a01b03166112a95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20546f6b656e20646f6573206e6f742065786973740000000060448201526064016107dc565b6101646112b583611c39565b6040516020016112c6929190612af6565b6040516020818303038152906040529050919050565b600082815260ce60205260409020600101546112f881336114f2565b6107848383611944565b600080516020612d6083398151915261131b81336114f2565b610784838361186a565b610164805461133390612a9f565b80601f016020809104026020016040519081016040528092919081815260200182805461135f90612a9f565b80156113ac5780601f10611381576101008083540402835291602001916113ac565b820191906000526020600020905b81548152906001019060200180831161138f57829003601f168201915b505050505081565b6033546001600160a01b0316331461140e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107dc565b6001600160a01b0381166114735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107dc565b610c7581611b29565b60006301ffc9a760e01b6001600160e01b0319831614806114ad57506001600160e01b031982166380ac58cd60e01b145b8061075157506001600160e01b03198216635b5e139f60e01b1492915050565b60006001600160e01b03198216637965db0b60e01b148061075157506107518261147c565b6114fc8282611217565b610bab57611514816001600160a01b03166014611d3f565b61151f836020611d3f565b604051602001611530929190612b94565b60408051601f198184030181529082905262461bcd60e51b82526107dc916004016125be565b600061156182610fc3565b905061156d6097611edb565b600082815260996020908152604080832080546001600160a01b03191690556001600160a01b038416808452609890925280832083905551849291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383811660008181526098602081815260408084208490558684526099825280842080546001600160a01b031916968916968717905585845291905280822085905551849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6116528282611217565b610bab57600082815260ce602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561168a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006107516116db611f32565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061172b8585611fad565b9092509050600081600481111561174457611744612c09565b1480156117625750856001600160a01b0316826001600160a01b0316145b1561177257600192505050611863565b600080876001600160a01b0316631626ba7e60e01b888860405160240161179a929190612c1f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516117d89190612c38565b600060405180830381855afa9150503d8060008114611813576040519150601f19603f3d011682016040523d82523d6000602084013e611818565b606091505b509150915081801561182b575080516020145b801561185c57508051630b135d3f60e11b906118509083016020908101908401612c54565b6001600160e01b031916145b9450505050505b9392505050565b6000818152609960205260409020546001600160a01b0316156118c75760405162461bcd60e51b8152602060048201526015602482015274135a5b9d0e88185b1c9958591e4818db185a5b5959605a1b60448201526064016107dc565b6001600160a01b038216158015906118de57508015155b61192a5760405162461bcd60e51b815260206004820152601f60248201527f4d696e743a2063616e6e6f74206d696e74206e756c6c206964206f7220746f0060448201526064016107dc565b611938609780546001019055565b610bab600083836115d2565b61194e8282611217565b15610bab57600082815260ce602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6000610bab81336114f2565b60006119ef6119ab565b90506119fa8461201d565b600083511180611a075750815b15611a1857611a1684846120c2565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166108d357805460ff191660011781556040516001600160a01b0383166024820152611a9790869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526120c2565b50805460ff19168155611aa86119ab565b6001600160a01b0316826001600160a01b031614611b205760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016107dc565b6108d3856121ad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611ba25760405162461bcd60e51b81526004016107dc90612c71565b610bab82826121ed565b600054610100900460ff16611bd35760405162461bcd60e51b81526004016107dc90612c71565b611bdb61222e565b6110d861222e565b600054610100900460ff16611bdb5760405162461bcd60e51b81526004016107dc90612c71565b600054610100900460ff16611c315760405162461bcd60e51b81526004016107dc90612c71565b611bd361222e565b606081611c5d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c875780611c71816129ec565b9150611c809050600a83612cd2565b9150611c61565b60008167ffffffffffffffff811115611ca257611ca2612476565b6040519080825280601f01601f191660200182016040528015611ccc576020820181803683370190505b5090505b8415611d3757611ce1600183612ce6565b9150611cee600a86612cfd565b611cf9906030612d11565b60f81b818381518110611d0e57611d0e6129c0565b60200101906001600160f81b031916908160001a905350611d30600a86612cd2565b9450611cd0565b949350505050565b60606000611d4e836002612d29565b611d59906002612d11565b67ffffffffffffffff811115611d7157611d71612476565b6040519080825280601f01601f191660200182016040528015611d9b576020820181803683370190505b509050600360fc1b81600081518110611db657611db66129c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611de557611de56129c0565b60200101906001600160f81b031916908160001a9053506000611e09846002612d29565b611e14906001612d11565b90505b6001811115611e8c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e4857611e486129c0565b1a60f81b828281518110611e5e57611e5e6129c0565b60200101906001600160f81b031916908160001a90535060049490941c93611e8581612d48565b9050611e17565b5083156118635760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107dc565b805480611f2a5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016107dc565b600019019055565b60006107f07f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611f61609a5490565b609b546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b600080825160411415611fe45760208301516040840151606085015160001a611fd887828585612255565b94509450505050612016565b82516040141561200e5760208301516040840151612003868383612342565b935093505050612016565b506000905060025b9250929050565b803b6120815760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107dc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6121215760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107dc565b600080846001600160a01b03168460405161213c9190612c38565b600060405180830381855af49150503d8060008114612177576040519150601f19603f3d011682016040523d82523d6000602084013e61217c565b606091505b50915091506121a48282604051806060016040528060278152602001612d8060279139612371565b95945050505050565b6121b68161201d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166122145760405162461bcd60e51b81526004016107dc90612c71565b815160209283012081519190920120609a91909155609b55565b600054610100900460ff166110d85760405162461bcd60e51b81526004016107dc90612c71565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561228c5750600090506003612339565b8460ff16601b141580156122a457508460ff16601c14155b156122b55750600090506004612339565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612309573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661233257600060019250925050612339565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161236387828885612255565b935093505050935093915050565b60608315612380575081611863565b8251156123905782518084602001fd5b8160405162461bcd60e51b81526004016107dc91906125be565b8280546123b690612a9f565b90600052602060002090601f0160209004810192826123d8576000855561241e565b82601f106123f157805160ff191683800117855561241e565b8280016001018555821561241e579182015b8281111561241e578251825591602001919060010190612403565b5061242a92915061242e565b5090565b5b8082111561242a576000815560010161242f565b6001600160e01b031981168114610c7557600080fd5b60006020828403121561246b57600080fd5b813561186381612443565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156124b5576124b5612476565b604052919050565b600082601f8301126124ce57600080fd5b813567ffffffffffffffff8111156124e8576124e8612476565b6124fb601f8201601f191660200161248c565b81815284602083860101111561251057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561253f57600080fd5b813567ffffffffffffffff81111561255657600080fd5b611d37848285016124bd565b60005b8381101561257d578181015183820152602001612565565b8381111561258c576000848401525b50505050565b600081518084526125aa816020860160208601612562565b601f01601f19169290920160200192915050565b6020815260006118636020830184612592565b6000602082840312156125e357600080fd5b5035919050565b80356001600160a01b038116811461260157600080fd5b919050565b6000806040838503121561261957600080fd5b612622836125ea565b946020939093013593505050565b6000602080838503121561264357600080fd5b823567ffffffffffffffff8082111561265b57600080fd5b818501915085601f83011261266f57600080fd5b81358181111561268157612681612476565b8060051b915061269284830161248c565b81815291830184019184810190888411156126ac57600080fd5b938501935b838510156126ca578435825293850193908501906126b1565b98975050505050505050565b6000806000606084860312156126eb57600080fd5b6126f4846125ea565b9250612702602085016125ea565b9150604084013590509250925092565b6000806040838503121561272557600080fd5b82359150612735602084016125ea565b90509250929050565b60008060008060008060c0878903121561275757600080fd5b612760876125ea565b955061276e602088016125ea565b945060408701359350606087013592506080870135915060a087013567ffffffffffffffff81111561279f57600080fd5b6127ab89828a016124bd565b9150509295509295509295565b6000602082840312156127ca57600080fd5b611863826125ea565b600080600080600080600060e0888a0312156127ee57600080fd5b6127f7886125ea565b9650612805602089016125ea565b9550612813604089016125ea565b9450606088013593506080880135925060a0880135915060c088013567ffffffffffffffff81111561284457600080fd5b6128508a828b016124bd565b91505092959891949750929550565b6000806040838503121561287257600080fd5b61287b836125ea565b9150602083013567ffffffffffffffff81111561289757600080fd5b6128a3858286016124bd565b9150509250929050565b600080604083850312156128c057600080fd5b823567ffffffffffffffff8111156128d757600080fd5b6128e3858286016124bd565b925050612735602084016125ea565b6000806040838503121561290557600080fd5b61290e836125ea565b91506020830135801515811461292357600080fd5b809150509250929050565b6000806000806080858703121561294457600080fd5b61294d856125ea565b935061295b602086016125ea565b925060408501359150606085013567ffffffffffffffff81111561297e57600080fd5b61298a878288016124bd565b91505092959194509250565b600080604083850312156129a957600080fd5b6129b2836125ea565b9150612735602084016125ea565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612a0057612a006129d6565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600181811c90821680612ab357607f821691505b60208210811415612ad457634e487b7160e01b600052602260045260246000fd5b50919050565b60008151612aec818560208601612562565b9290920192915050565b600080845481600182811c915080831680612b1257607f831692505b6020808410821415612b3257634e487b7160e01b86526022600452602486fd5b818015612b465760018114612b5757612b84565b60ff19861689528489019650612b84565b60008b81526020902060005b86811015612b7c5781548b820152908501908301612b63565b505084890196505b5050505050506121a48185612ada565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612bcc816017850160208801612562565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612bfd816028840160208801612562565b01602801949350505050565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000611d376040830184612592565b60008251612c4a818460208701612562565b9190910192915050565b600060208284031215612c6657600080fd5b815161186381612443565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612ce157612ce1612cbc565b500490565b600082821015612cf857612cf86129d6565b500390565b600082612d0c57612d0c612cbc565b500690565b60008219821115612d2457612d246129d6565b500190565b6000816000190483118215151615612d4357612d436129d6565b500290565b600081612d5757612d576129d6565b50600019019056fe0be7dc2b6f1c4aa33bf833a508f2b20d047034d65c3c983b36058bc4f7d3080b416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c6a3251acbeb81fa61410ec290c7a7670dd3186155da8499d9cac1604effc3f164736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c80636717e41c11610123578063a217fddf116100ab578063d547741f1161006f578063d547741f1461069f578063e58306f9146106bf578063e78191ad146106df578063e985e9c5146106f4578063f2fde38b1461071757600080fd5b8063a217fddf14610607578063a22cb4651461061c578063b88d4fde14610637578063c87b56dd14610652578063cb0e0d7d1461067257600080fd5b80638ad44fd5116100f25780638ad44fd5146105415780638da5cb5b1461056357806391d148541461058157806395d89b41146105a1578063a1ebf35d146105d357600080fd5b80636717e41c146104bb57806370a08231146104ec578063715018a61461050c5780637ab4339d1461052157600080fd5b80632f2ff15d116101a657806342842e0e1161017557806342842e0e1461042d57806342966c681461044857806346090571146104685780634f1ef286146104885780636352211e1461049b57600080fd5b80632f2ff15d146103ad578063342623f1146103cd57806336568abe146103ed5780633659cfe61461040d57600080fd5b8063095ea7b3116101ed578063095ea7b3146102fa57806318160ddd1461031a5780631e79ad421461033d57806323b872dd1461035d578063248a9ca31461037d57600080fd5b806301ffc9a71461021f57806302d9e6961461025457806306fdde0314610276578063081812fc146102c1575b600080fd5b34801561022b57600080fd5b5061023f61023a366004612459565b610737565b60405190151581526020015b60405180910390f35b34801561026057600080fd5b5061027461026f36600461252d565b610757565b005b34801561028257600080fd5b506102b4604051806040016040528060128152602001711195d08813595b58995c9cda1a5c0813919560721b81525081565b60405161024b91906125be565b3480156102cd57600080fd5b506102e26102dc3660046125d1565b50600090565b6040516001600160a01b03909116815260200161024b565b34801561030657600080fd5b50610274610315366004612606565b610789565b34801561032657600080fd5b5061032f6107e5565b60405190815260200161024b565b34801561034957600080fd5b50610274610358366004612630565b6107f5565b34801561036957600080fd5b506102746103783660046126d6565b61084e565b34801561038957600080fd5b5061032f6103983660046125d1565b600090815260ce602052604090206001015490565b3480156103b957600080fd5b506102746103c8366004612712565b6108da565b3480156103d957600080fd5b506102746103e836600461273e565b610900565b3480156103f957600080fd5b50610274610408366004612712565b610b31565b34801561041957600080fd5b506102746104283660046127b8565b610baf565b34801561043957600080fd5b506102746103153660046126d6565b34801561045457600080fd5b506102746104633660046125d1565b610c78565b34801561047457600080fd5b506102746104833660046127d3565b610cea565b61027461049636600461285f565b610f0d565b3480156104a757600080fd5b506102e26104b63660046125d1565b610fc3565b3480156104c757600080fd5b5061023f6104d63660046125d1565b6101656020526000908152604090205460ff1681565b3480156104f857600080fd5b5061032f6105073660046127b8565b611043565b34801561051857600080fd5b50610274611074565b34801561052d57600080fd5b5061027461053c3660046128ad565b6110da565b34801561054d57600080fd5b5061032f600080516020612d6083398151915281565b34801561056f57600080fd5b506033546001600160a01b03166102e2565b34801561058d57600080fd5b5061023f61059c366004612712565b611217565b3480156105ad57600080fd5b506102b4604051806040016040528060068152602001654657424d454d60d01b81525081565b3480156105df57600080fd5b5061032f7fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7081565b34801561061357600080fd5b5061032f600081565b34801561062857600080fd5b506102746103153660046128f2565b34801561064357600080fd5b5061027461031536600461292e565b34801561065e57600080fd5b506102b461066d3660046125d1565b611242565b34801561067e57600080fd5b5061032f61068d3660046127b8565b60986020526000908152604090205481565b3480156106ab57600080fd5b506102746106ba366004612712565b6112dc565b3480156106cb57600080fd5b506102746106da366004612606565b611302565b3480156106eb57600080fd5b506102b4611325565b34801561070057600080fd5b5061023f61070f366004612996565b600092915050565b34801561072357600080fd5b506102746107323660046127b8565b6113b4565b60006107428261147c565b806107515750610751826114cd565b92915050565b600080516020612d6083398151915261077081336114f2565b8151610784906101649060208501906123aa565b505050565b60405162461bcd60e51b815260206004820152602660248201527f466e206e6f7420737570706f727465643a206e6f6e7472616e736665727261626044820152651b194813919560d21b60648201526084015b60405180910390fd5b60006107f060975490565b905090565b600080516020612d6083398151915261080e81336114f2565b60005b82518110156107845761083c83828151811061082f5761082f6129c0565b6020026020010151611556565b80610846816129ec565b915050610811565b600080516020612d6083398151915261086781336114f2565b6001600160a01b0384166000908152609860205260409020548281146108c85760405162461bcd60e51b815260206004820152601660248201527508aa4a47440a8ded6cadc40928840dad2e6dac2e8c6d60531b60448201526064016107dc565b6108d38585836115d2565b5050505050565b600082815260ce60205260409020600101546108f681336114f2565b6107848383611648565b8183804211156109495760405162461bcd60e51b8152602060048201526014602482015273111958591b1a5b99481d1a5b59481c185cdcd95960621b60448201526064016107dc565b6000828152610165602052604090205460ff16156109965760405162461bcd60e51b815260206004820152600a6024820152691b9bdb98d9481d5cd95960b21b60448201526064016107dc565b600082815261016560205260409020805460ff191660011790557fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70886109dc82826114f2565b6001600160a01b0389163314610a345760405162461bcd60e51b815260206004820152601c60248201527f4e6565647320746f20626520726563656976696e672077616c6c65740000000060448201526064016107dc565b604080517f000000000000000000000000000000000000000000000000000000000000000060208201526001600160a01b03808d1692820192909252908a1660608201526080810189905260a0810188905260c08101879052610abc908b90610ab69060e0015b604051602081830303815290604052805190602001206116ce565b8761171c565b610b1b5760405162461bcd60e51b815260206004820152602a60248201527f4e46545065726d69743a3a6d696e74576974685369676e3a20496e76616c6964604482015269207369676e617475726560b01b60648201526084016107dc565b610b25898961186a565b50505050505050505050565b6001600160a01b0381163314610ba15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107dc565b610bab8282611944565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610bf85760405162461bcd60e51b81526004016107dc90612a07565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c2a6119ab565b6001600160a01b031614610c505760405162461bcd60e51b81526004016107dc90612a53565b610c59816119d9565b60408051600080825260208201909252610c75918391906119e5565b50565b610c8181610fc3565b6001600160a01b0316336001600160a01b031614610ce15760405162461bcd60e51b815260206004820152601b60248201527f4e4654204275726e3a206e6565647320746f206265206f776e6572000000000060448201526064016107dc565b610c7581611556565b818380421115610d335760405162461bcd60e51b8152602060048201526014602482015273111958591b1a5b99481d1a5b59481c185cdcd95960621b60448201526064016107dc565b6000828152610165602052604090205460ff1615610d805760405162461bcd60e51b815260206004820152600a6024820152691b9bdb98d9481d5cd95960b21b60448201526064016107dc565b600082815261016560205260409020805460ff191660011790557fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7089610dc682826114f2565b6001600160a01b0389163314610e1e5760405162461bcd60e51b815260206004820152601c60248201527f4e6565647320746f20626520726563656976696e672077616c6c65740000000060448201526064016107dc565b604080517f000000000000000000000000000000000000000000000000000000000000000060208201526001600160a01b03808e1692820192909252818c166060820152908a16608082015260a0810189905260c0810188905260e08101879052610e92908c90610ab69061010001610a9b565b610ef55760405162461bcd60e51b815260206004820152602e60248201527f4e46545065726d69743a3a7472616e73666572576974685369676e3a20496e7660448201526d616c6964207369676e617475726560901b60648201526084016107dc565b610f008a8a8a6115d2565b5050505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610f565760405162461bcd60e51b81526004016107dc90612a07565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f886119ab565b6001600160a01b031614610fae5760405162461bcd60e51b81526004016107dc90612a53565b610fb7826119d9565b610bab828260016119e5565b6000818152609960205260408120546001600160a01b03166110275760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20546f6b656e20646f6573206e6f742065786973740000000060448201526064016107dc565b506000908152609960205260409020546001600160a01b031690565b6001600160a01b0381166000908152609860205260408120541561106857600161106b565b60005b60ff1692915050565b6033546001600160a01b031633146110ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107dc565b6110d86000611b29565b565b600054610100900460ff166110f55760005460ff16156110f9565b303b155b61115c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107dc565b600054610100900460ff1615801561117e576000805461ffff19166101011790555b6111c96040518060400160405280601081526020016f1195d093595b58995c9cda1a5c13919560821b815250604051806040016040528060018152602001603160f81b815250611b7b565b6111d1611bac565b6111d9611be3565b6111e1611c0a565b6111ec600083611648565b8251611200906101649060208601906123aa565b508015610784576000805461ff0019169055505050565b600091825260ce602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152609960205260409020546060906001600160a01b03166112a95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20546f6b656e20646f6573206e6f742065786973740000000060448201526064016107dc565b6101646112b583611c39565b6040516020016112c6929190612af6565b6040516020818303038152906040529050919050565b600082815260ce60205260409020600101546112f881336114f2565b6107848383611944565b600080516020612d6083398151915261131b81336114f2565b610784838361186a565b610164805461133390612a9f565b80601f016020809104026020016040519081016040528092919081815260200182805461135f90612a9f565b80156113ac5780601f10611381576101008083540402835291602001916113ac565b820191906000526020600020905b81548152906001019060200180831161138f57829003601f168201915b505050505081565b6033546001600160a01b0316331461140e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107dc565b6001600160a01b0381166114735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107dc565b610c7581611b29565b60006301ffc9a760e01b6001600160e01b0319831614806114ad57506001600160e01b031982166380ac58cd60e01b145b8061075157506001600160e01b03198216635b5e139f60e01b1492915050565b60006001600160e01b03198216637965db0b60e01b148061075157506107518261147c565b6114fc8282611217565b610bab57611514816001600160a01b03166014611d3f565b61151f836020611d3f565b604051602001611530929190612b94565b60408051601f198184030181529082905262461bcd60e51b82526107dc916004016125be565b600061156182610fc3565b905061156d6097611edb565b600082815260996020908152604080832080546001600160a01b03191690556001600160a01b038416808452609890925280832083905551849291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383811660008181526098602081815260408084208490558684526099825280842080546001600160a01b031916968916968717905585845291905280822085905551849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6116528282611217565b610bab57600082815260ce602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561168a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006107516116db611f32565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061172b8585611fad565b9092509050600081600481111561174457611744612c09565b1480156117625750856001600160a01b0316826001600160a01b0316145b1561177257600192505050611863565b600080876001600160a01b0316631626ba7e60e01b888860405160240161179a929190612c1f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516117d89190612c38565b600060405180830381855afa9150503d8060008114611813576040519150601f19603f3d011682016040523d82523d6000602084013e611818565b606091505b509150915081801561182b575080516020145b801561185c57508051630b135d3f60e11b906118509083016020908101908401612c54565b6001600160e01b031916145b9450505050505b9392505050565b6000818152609960205260409020546001600160a01b0316156118c75760405162461bcd60e51b8152602060048201526015602482015274135a5b9d0e88185b1c9958591e4818db185a5b5959605a1b60448201526064016107dc565b6001600160a01b038216158015906118de57508015155b61192a5760405162461bcd60e51b815260206004820152601f60248201527f4d696e743a2063616e6e6f74206d696e74206e756c6c206964206f7220746f0060448201526064016107dc565b611938609780546001019055565b610bab600083836115d2565b61194e8282611217565b15610bab57600082815260ce602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6000610bab81336114f2565b60006119ef6119ab565b90506119fa8461201d565b600083511180611a075750815b15611a1857611a1684846120c2565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166108d357805460ff191660011781556040516001600160a01b0383166024820152611a9790869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526120c2565b50805460ff19168155611aa86119ab565b6001600160a01b0316826001600160a01b031614611b205760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016107dc565b6108d3856121ad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611ba25760405162461bcd60e51b81526004016107dc90612c71565b610bab82826121ed565b600054610100900460ff16611bd35760405162461bcd60e51b81526004016107dc90612c71565b611bdb61222e565b6110d861222e565b600054610100900460ff16611bdb5760405162461bcd60e51b81526004016107dc90612c71565b600054610100900460ff16611c315760405162461bcd60e51b81526004016107dc90612c71565b611bd361222e565b606081611c5d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c875780611c71816129ec565b9150611c809050600a83612cd2565b9150611c61565b60008167ffffffffffffffff811115611ca257611ca2612476565b6040519080825280601f01601f191660200182016040528015611ccc576020820181803683370190505b5090505b8415611d3757611ce1600183612ce6565b9150611cee600a86612cfd565b611cf9906030612d11565b60f81b818381518110611d0e57611d0e6129c0565b60200101906001600160f81b031916908160001a905350611d30600a86612cd2565b9450611cd0565b949350505050565b60606000611d4e836002612d29565b611d59906002612d11565b67ffffffffffffffff811115611d7157611d71612476565b6040519080825280601f01601f191660200182016040528015611d9b576020820181803683370190505b509050600360fc1b81600081518110611db657611db66129c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611de557611de56129c0565b60200101906001600160f81b031916908160001a9053506000611e09846002612d29565b611e14906001612d11565b90505b6001811115611e8c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e4857611e486129c0565b1a60f81b828281518110611e5e57611e5e6129c0565b60200101906001600160f81b031916908160001a90535060049490941c93611e8581612d48565b9050611e17565b5083156118635760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107dc565b805480611f2a5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016107dc565b600019019055565b60006107f07f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611f61609a5490565b609b546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b600080825160411415611fe45760208301516040840151606085015160001a611fd887828585612255565b94509450505050612016565b82516040141561200e5760208301516040840151612003868383612342565b935093505050612016565b506000905060025b9250929050565b803b6120815760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107dc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6121215760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107dc565b600080846001600160a01b03168460405161213c9190612c38565b600060405180830381855af49150503d8060008114612177576040519150601f19603f3d011682016040523d82523d6000602084013e61217c565b606091505b50915091506121a48282604051806060016040528060278152602001612d8060279139612371565b95945050505050565b6121b68161201d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166122145760405162461bcd60e51b81526004016107dc90612c71565b815160209283012081519190920120609a91909155609b55565b600054610100900460ff166110d85760405162461bcd60e51b81526004016107dc90612c71565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561228c5750600090506003612339565b8460ff16601b141580156122a457508460ff16601c14155b156122b55750600090506004612339565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612309573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661233257600060019250925050612339565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161236387828885612255565b935093505050935093915050565b60608315612380575081611863565b8251156123905782518084602001fd5b8160405162461bcd60e51b81526004016107dc91906125be565b8280546123b690612a9f565b90600052602060002090601f0160209004810192826123d8576000855561241e565b82601f106123f157805160ff191683800117855561241e565b8280016001018555821561241e579182015b8281111561241e578251825591602001919060010190612403565b5061242a92915061242e565b5090565b5b8082111561242a576000815560010161242f565b6001600160e01b031981168114610c7557600080fd5b60006020828403121561246b57600080fd5b813561186381612443565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156124b5576124b5612476565b604052919050565b600082601f8301126124ce57600080fd5b813567ffffffffffffffff8111156124e8576124e8612476565b6124fb601f8201601f191660200161248c565b81815284602083860101111561251057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561253f57600080fd5b813567ffffffffffffffff81111561255657600080fd5b611d37848285016124bd565b60005b8381101561257d578181015183820152602001612565565b8381111561258c576000848401525b50505050565b600081518084526125aa816020860160208601612562565b601f01601f19169290920160200192915050565b6020815260006118636020830184612592565b6000602082840312156125e357600080fd5b5035919050565b80356001600160a01b038116811461260157600080fd5b919050565b6000806040838503121561261957600080fd5b612622836125ea565b946020939093013593505050565b6000602080838503121561264357600080fd5b823567ffffffffffffffff8082111561265b57600080fd5b818501915085601f83011261266f57600080fd5b81358181111561268157612681612476565b8060051b915061269284830161248c565b81815291830184019184810190888411156126ac57600080fd5b938501935b838510156126ca578435825293850193908501906126b1565b98975050505050505050565b6000806000606084860312156126eb57600080fd5b6126f4846125ea565b9250612702602085016125ea565b9150604084013590509250925092565b6000806040838503121561272557600080fd5b82359150612735602084016125ea565b90509250929050565b60008060008060008060c0878903121561275757600080fd5b612760876125ea565b955061276e602088016125ea565b945060408701359350606087013592506080870135915060a087013567ffffffffffffffff81111561279f57600080fd5b6127ab89828a016124bd565b9150509295509295509295565b6000602082840312156127ca57600080fd5b611863826125ea565b600080600080600080600060e0888a0312156127ee57600080fd5b6127f7886125ea565b9650612805602089016125ea565b9550612813604089016125ea565b9450606088013593506080880135925060a0880135915060c088013567ffffffffffffffff81111561284457600080fd5b6128508a828b016124bd565b91505092959891949750929550565b6000806040838503121561287257600080fd5b61287b836125ea565b9150602083013567ffffffffffffffff81111561289757600080fd5b6128a3858286016124bd565b9150509250929050565b600080604083850312156128c057600080fd5b823567ffffffffffffffff8111156128d757600080fd5b6128e3858286016124bd565b925050612735602084016125ea565b6000806040838503121561290557600080fd5b61290e836125ea565b91506020830135801515811461292357600080fd5b809150509250929050565b6000806000806080858703121561294457600080fd5b61294d856125ea565b935061295b602086016125ea565b925060408501359150606085013567ffffffffffffffff81111561297e57600080fd5b61298a878288016124bd565b91505092959194509250565b600080604083850312156129a957600080fd5b6129b2836125ea565b9150612735602084016125ea565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612a0057612a006129d6565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600181811c90821680612ab357607f821691505b60208210811415612ad457634e487b7160e01b600052602260045260246000fd5b50919050565b60008151612aec818560208601612562565b9290920192915050565b600080845481600182811c915080831680612b1257607f831692505b6020808410821415612b3257634e487b7160e01b86526022600452602486fd5b818015612b465760018114612b5757612b84565b60ff19861689528489019650612b84565b60008b81526020902060005b86811015612b7c5781548b820152908501908301612b63565b505084890196505b5050505050506121a48185612ada565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612bcc816017850160208801612562565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612bfd816028840160208801612562565b01602801949350505050565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000611d376040830184612592565b60008251612c4a818460208701612562565b9190910192915050565b600060208284031215612c6657600080fd5b815161186381612443565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612ce157612ce1612cbc565b500490565b600082821015612cf857612cf86129d6565b500390565b600082612d0c57612d0c612cbc565b500690565b60008219821115612d2457612d246129d6565b500190565b6000816000190483118215151615612d4357612d436129d6565b500290565b600081612d5757612d576129d6565b50600019019056fe0be7dc2b6f1c4aa33bf833a508f2b20d047034d65c3c983b36058bc4f7d3080b416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c6a3251acbeb81fa61410ec290c7a7670dd3186155da8499d9cac1604effc3f164736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressToId(address)": {
        "notice": "Stores address to membership id"
      },
      "adminMint(address,uint256)": {
        "notice": "Mint mew membership from the manager role"
      },
      "adminRevokeMemberships(uint256[])": {
        "notice": "Admin function to revoke membership for user"
      },
      "approve(address,uint256)": {
        "notice": "approvals not supported"
      },
      "balanceOf(address)": {
        "notice": "blanaceOf getter for NFT compat"
      },
      "getApproved(uint256)": {
        "notice": "approvals not supported"
      },
      "initialize(string,address)": {
        "notice": "Upgradeable init fn"
      },
      "isApprovedForAll(address,address)": {
        "notice": "approvals not supported"
      },
      "mintWithSign(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "Mint with signed message data"
      },
      "name()": {
        "notice": "NFT Metadata Name"
      },
      "ownerOf(uint256)": {
        "notice": "ownerOf getter, checks if token exists"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "not supported"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "not supported"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "approvals not supported"
      },
      "symbol()": {
        "notice": "NFT Metadata Symbol"
      },
      "tokenURI(uint256)": {
        "notice": "Getter for url server nft base"
      },
      "totalSupply()": {
        "notice": "erc721 enumerable partial impl"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Admin function to transfer a wallet to a new NFT address"
      },
      "transferWithSign(address,address,address,uint256,uint256,uint256,bytes)": {
        "notice": "Transfer with signed message data"
      },
      "updateUrlBase(string)": {
        "notice": "admin function to update base uri"
      },
      "urlBase()": {
        "notice": "URLBase for metadata"
      },
      "usedNonces(uint256)": {
        "notice": "list of used signature nonces"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 964,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 967,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1573,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2574,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3054,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "numberTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_struct(Counter)1580_storage"
      },
      {
        "astId": 3059,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "addressToId",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3064,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "idToAddress",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2389,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 2391,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "155",
        "type": "t_bytes32"
      },
      {
        "astId": 2528,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "_roles",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 946,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "256",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1141,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2632,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "urlBase",
        "offset": 0,
        "slot": "356",
        "type": "t_string_storage"
      },
      {
        "astId": 2826,
        "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
        "label": "usedNonces",
        "offset": 0,
        "slot": "357",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1580_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1579,
            "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/FWBMembershipNFT.sol:FWBMembershipNFT",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}