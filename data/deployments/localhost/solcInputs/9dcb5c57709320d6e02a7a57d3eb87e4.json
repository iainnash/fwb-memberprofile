{
  "language": "Solidity",
  "sources": {
    "contracts/FWBProtocolRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\n\n\n/**\n\n   ___  __    __  ___    ___           _                  _   __            _     _              \n  / __\\/ / /\\ \\ \\/ __\\  / _ \\_ __ ___ | |_ ___   ___ ___ | | /__\\ ___  __ _(_)___| |_ _ __ _   _ \n / _\\  \\ \\/  \\/ /__\\// / /_)/ '__/ _ \\| __/ _ \\ / __/ _ \\| |/ \\/// _ \\/ _` | / __| __| '__| | | |\n/ /     \\  /\\  / \\/  \\/ ___/| | | (_) | || (_) | (_| (_) | / _  \\  __/ (_| | \\__ \\ |_| |  | |_| |\n\\/       \\/  \\/\\_____/\\/    |_|  \\___/ \\__\\___/ \\___\\___/|_\\/ \\_/\\___|\\__, |_|___/\\__|_|   \\__, |\n                                                                      |___/                |___/ \n-------------------------------------------------------------------------------------------------\n\"FWBProtocolRegistry\"   :                                   central on-chain registry of all FWB\n                                                            protocol related contracts deployed\n                                                            on the ethereum mainnet.\n\n@author                 :                                   @ bretth18 / @ computerdata for\n                                                            Friends With Benefits.\n\n@title                  :                                   \"FWBProtocolRegistry\"\n */\ncontract FWBProtocolRegistry {\n    \n    /// Struct to hold registration of contracts\n    struct ContractRegister {\n        address owner;\n        address contractAddress;\n        uint16 version;\n    }\n\n    /// Mapping variable for data set\n    mapping(string => ContractRegister) registry;\n\n\n\n    function registerContract(string memory name, address addr, uint16 ver) public returns (bool) {\n        // arrays start at 0\n        require(ver >= 0);\n\n\n        ContractRegister memory info = registry[name];\n\n        // only allow \"owner\" to modify\n        require(info.owner == msg.sender);\n\n        // Create info is not already in registry\n        if (info.contractAddress == address(0)) {\n\n            info = ContractRegister({\n                owner: msg.sender,\n                contractAddress: addr,\n                version: ver\n            });\n\n        } else {\n\n            info.version = ver;\n            info.contractAddress = addr;\n        }\n\n        // update registry \n        registry[name] = info;\n        return true;\n    }\n\n\n\n    function getContractAddress(string memory name) public view returns (address) {\n        return registry[name].contractAddress;\n    }\n\n\n\n\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}